{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/icon-error.svg"],"names":["App","className","initialValues","firstName","lastName","email","password","validate","values","errors","test","length","onSubmit","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","isSubmitting","type","name","placeholder","style","border","backgroundImage","ErrorLogo","backgroundRepeat","backgroundPosition","component","color","disabled","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+RA4LeA,EAxLH,WACV,OACE,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,kCACb,wBAAIA,UAAU,QAAd,oCACA,uLAMF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACb,2BACE,iDADF,mCAKJ,kBAAC,IAAD,CACEC,cAAe,CACbC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAACC,GACT,IAAMC,EAAS,GAgBf,OAfKD,EAAOH,MAEAG,EAAOL,UAEPK,EAAOJ,SAEPI,EAAOF,SAGhB,2CAA2CI,KAAKF,EAAOH,OAG/CG,EAAOF,SAASK,OAAS,IAClCF,EAAOH,SAAW,gCAFlBG,EAAOJ,MAAQ,kCAJfI,EAAOH,SAAW,2BAFlBG,EAAOL,SAAW,4BAFlBK,EAAON,UAAY,6BAFnBM,EAAOJ,MAAQ,wBAcVI,GAETG,SAAU,SAACJ,EAAD,GAA2C,IAAhCK,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCC,YAAW,WACTC,MAAMC,KAAKC,UAAUV,EAAQ,KAAM,IACnCK,GAAc,KACb,KACHC,EAAU,OAEX,gBAAGL,EAAH,EAAGA,OAAQU,EAAX,EAAWA,aAAX,OACC,kBAAC,IAAD,CAAMlB,UAAU,mBACbQ,EAAON,UACN,kBAAC,IAAD,CACEiB,KAAK,OACLC,KAAK,YACLC,YAAY,aACZC,MAAO,CACLC,OAAQ,gBACRC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,mBAAoB,uBAIxB,kBAAC,IAAD,CACER,KAAK,OACLC,KAAK,YACLC,YAAY,eAGhB,kBAAC,IAAD,CACED,KAAK,YACLQ,UAAU,KACVN,MAAO,CAAEO,MAAO,SAEjBrB,EAAOL,SACN,kBAAC,IAAD,CACEgB,KAAK,OACLC,KAAK,WACLC,YAAY,YACZC,MAAO,CACLC,OAAQ,gBACRC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,mBAAoB,uBAIxB,kBAAC,IAAD,CAAOR,KAAK,OAAOC,KAAK,WAAWC,YAAY,cAEjD,kBAAC,IAAD,CACED,KAAK,WACLQ,UAAU,KACVN,MAAO,CAAEO,MAAO,SAEjBrB,EAAOJ,MACN,kBAAC,IAAD,CACEe,KAAK,QACLC,KAAK,QACLC,YAAY,gBACZC,MAAO,CACLC,OAAQ,gBACRC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,mBAAoB,uBAIxB,kBAAC,IAAD,CACER,KAAK,QACLC,KAAK,QACLC,YAAY,kBAGhB,kBAAC,IAAD,CACED,KAAK,QACLQ,UAAU,KACVN,MAAO,CAAEO,MAAO,SAEjBrB,EAAOH,SACN,kBAAC,IAAD,CACEc,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,MAAO,CACLC,OAAQ,gBACRC,gBAAgB,OAAD,OAASC,IAAT,KACfC,iBAAkB,YAClBC,mBAAoB,uBAIxB,kBAAC,IAAD,CACER,KAAK,WACLC,KAAK,WACLC,YAAY,aAGhB,kBAAC,IAAD,CACED,KAAK,WACLQ,UAAU,KACVN,MAAO,CAAEO,MAAO,SAElB,4BACE7B,UAAU,SACVmB,KAAK,SACLW,SAAUZ,GAHZ,yBAMA,uBAAGlB,UAAU,aAAb,kDACkD,IAChD,6DAOZ,gCACE,uBAAGA,UAAU,eAAb,eACe,IACb,uBACE+B,KAAK,8CACLC,OAAO,SACPC,IAAI,uBAHN,mBAFF,aAQa,IACX,uBACEF,KAAK,qCACLC,OAAO,SACPC,IAAI,uBAHN,wBCpKUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,yC","file":"static/js/main.253d5a51.chunk.js","sourcesContent":["import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport ErrorLogo from './images/icon-error.svg';\n\nconst App = () => {\n  return (\n    <div className='container text-center'>\n      <div className='row row-container'>\n        <div className='column one-half d-flex-desktop'>\n          <h3 className='mt-5'>Learn to code by watching others</h3>\n          <p>\n            See how experienced developers solve problems in real-time. Watching\n            scripted tutorials is great, but understanding how developers think\n            is invaluable.\n          </p>\n        </div>\n        <div className='column one-half'>\n          <div className='blue-card mt-3'>\n            <div className='text-card'>\n              <p>\n                <strong>Try it free 7</strong> days then $20/mo. thereafter\n              </p>\n            </div>\n          </div>\n          <Formik\n            initialValues={{\n              firstName: '',\n              lastName: '',\n              email: '',\n              password: '',\n            }}\n            validate={(values) => {\n              const errors = {};\n              if (!values.email) {\n                errors.email = 'Email cannot be empty';\n              } else if (!values.firstName) {\n                errors.firstName = 'Firts Name cannot be empty';\n              } else if (!values.lastName) {\n                errors.lastName = 'Last Name cannot be empty';\n              } else if (!values.password) {\n                errors.password = 'Password cannot be empty';\n              } else if (\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n              ) {\n                errors.email = 'Looks like this is not an email';\n              } else if (values.password.length < 8) {\n                errors.password = 'Password almost 8 characters';\n              }\n              return errors;\n            }}\n            onSubmit={(values, { setSubmitting, resetForm }) => {\n              setTimeout(() => {\n                alert(JSON.stringify(values, null, 2));\n                setSubmitting(false);\n              }, 400);\n              resetForm({});\n            }}>\n            {({ errors, isSubmitting }) => (\n              <Form className='white-card mt-2'>\n                {errors.firstName ? (\n                  <Field\n                    type='text'\n                    name='firstName'\n                    placeholder='First Name'\n                    style={{\n                      border: '1px solid red',\n                      backgroundImage: `url(${ErrorLogo})`,\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'right 10px center',\n                    }}\n                  />\n                ) : (\n                  <Field\n                    type='text'\n                    name='firstName'\n                    placeholder='First Name'\n                  />\n                )}\n                <ErrorMessage\n                  name='firstName'\n                  component='h5'\n                  style={{ color: 'red' }}\n                />\n                {errors.lastName ? (\n                  <Field\n                    type='text'\n                    name='lastName'\n                    placeholder='Last Name'\n                    style={{\n                      border: '1px solid red',\n                      backgroundImage: `url(${ErrorLogo})`,\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'right 10px center',\n                    }}\n                  />\n                ) : (\n                  <Field type='text' name='lastName' placeholder='Last Name' />\n                )}\n                <ErrorMessage\n                  name='lastName'\n                  component='h5'\n                  style={{ color: 'red' }}\n                />\n                {errors.email ? (\n                  <Field\n                    type='email'\n                    name='email'\n                    placeholder='Email Address'\n                    style={{\n                      border: '1px solid red',\n                      backgroundImage: `url(${ErrorLogo})`,\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'right 10px center',\n                    }}\n                  />\n                ) : (\n                  <Field\n                    type='email'\n                    name='email'\n                    placeholder='Email Address'\n                  />\n                )}\n                <ErrorMessage\n                  name='email'\n                  component='h5'\n                  style={{ color: 'red' }}\n                />\n                {errors.password ? (\n                  <Field\n                    type='password'\n                    name='password'\n                    placeholder='Password'\n                    style={{\n                      border: '1px solid red',\n                      backgroundImage: `url(${ErrorLogo})`,\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'right 10px center',\n                    }}\n                  />\n                ) : (\n                  <Field\n                    type='password'\n                    name='password'\n                    placeholder='Password'\n                  />\n                )}\n                <ErrorMessage\n                  name='password'\n                  component='h5'\n                  style={{ color: 'red' }}\n                />\n                <button\n                  className='submit'\n                  type='submit'\n                  disabled={isSubmitting}>\n                  CLAIM YOUR FREE TRIAL\n                </button>\n                <p className='term-text'>\n                  By clicking the button, you are agreeing to our{' '}\n                  <strong>Terms and Services</strong>\n                </p>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n      <footer>\n        <p className='attribution'>\n          Challenge by{' '}\n          <a\n            href='https://www.frontendmentor.io?ref=challenge'\n            target='_blank'\n            rel='noopener noreferrer'>\n            Frontend Mentor\n          </a>\n          . Coded by{' '}\n          <a\n            href='https://josegarciamanez.github.io/'\n            target='_blank'\n            rel='noopener noreferrer'>\n            @josegarciamanez\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon-error.eb2c6ce2.svg\";"],"sourceRoot":""}